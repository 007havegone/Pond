#!/bin/bash
echo "(define (domain rockSample)";
echo " (:requirements :probabilistic-effects";
echo "                :negative-preconditions";
echo "                :conditional-effects";
echo "                :rewards";
echo "                :typing)";
echo " (:types";
echo "    pos";
echo "    rock";
echo "    dist";
echo " )";
echo -n " (:constants"
for((i=0; i<$1; i++)) do {
	echo -n " d"$i;
} done;
echo " - dist";
echo " )";
echo " (:predicates";
echo "   (pos_x ?x - pos)";
echo "   (pos_y ?y - pos)";
echo "   (succ ?p ?pn - pos)";
echo "   (good ?r -rock)";
echo "   (rpos_x ?r - rock ?x - pos)";
echo "   (rpos_y ?r - rock ?y - pos)";
echo "   (exit)";
echo "   (done)";
echo "   (sampled ?r - rock)";
echo "   (exitBoundary ?x - pos)";
echo "   (distance ?x ?xn - pos ?d - dist)";
echo " )";
echo "";
echo " (:action north";
echo "  :parameters (?x ?y ?yn - pos)";
echo "  :precondition (and (not (exit)) (not (done)) (pos_x ?x) (pos_y ?y) (succ ?y ?yn))";
echo "  :effect (and (not (pos_y ?y)) (pos_y ?yn) (decrease (reward) 1))";
echo " )";
echo " (:action south";
echo "  :parameters (?x ?y ?yn - pos)";
echo "  :precondition (and (not (exit)) (not (done)) (pos_x ?x) (pos_y ?y) (succ ?yn ?y))";
echo "  :effect (and (not (pos_y ?y)) (pos_y ?yn) (decrease (reward) 1))";
echo " )";
echo " (:action east";
echo "  :parameters (?x ?y ?xn - pos)";
echo "  :precondition (and (not (exit)) (not (done)) (pos_x ?x) (pos_y ?y) (succ ?x ?xn))";
echo "  :effect (and (not (pos_x ?x)) (pos_x ?xn) (decrease (reward) 1))";
echo " )";
echo "";
echo " (:action exit";
echo "  :parameters (?x - pos)";
echo "  :precondition (and (not (exit)) (pos_x ?x) (exitBoundary ?x))";
echo "  :effect (and (exit))";
echo " )";
echo "";
echo " (:action west";
echo "  :parameters (?x ?y ?xn - pos)";
echo "  :precondition (and (not (exit)) (not (done)) (pos_x ?x) (pos_y ?y) (succ ?xn ?x))";
echo "  :effect (and (not (pos_x ?x)) (pos_x ?xn) (decrease (reward) 1))";
echo " )";
echo "";
echo "";
echo " (:action sample";
echo "  :parameters (?x ?y - pos ?r - rock)";
echo "  :precondition (and (not (exit)) (not (done)) (pos_x ?x) (pos_y ?y) (rpos_x ?r ?x) (rpos_y ?r ?y) (not (sampled ?r)))";
echo "  :effect (and";
echo "      (sampled ?r)";
echo "		(when (good ?r) (increase (reward) 10))";
echo "		(when (not (good ?r)) (decrease (reward) 10))";
echo "	)";
echo " )";
echo "";
echo "";
echo "(:action end";
echo " :precondition (not (done))";
echo " :effect (and ";
echo "		(when (exit) (done))";
echo "  )";
echo " )";
echo "";
./mkCheckActs $1;
echo ")";
